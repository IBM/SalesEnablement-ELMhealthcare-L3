{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the IBM Engineering Lifecycle Management Level 3 demonstration guide! The goal of this demonstration guide is to provide sellers and technical sellers from IBM and Business Partners with the knowledge and tools to perform hands-on demonstrations of IBM Engineering Lifecycle Management. Throughout this demonstration guide IBM Engineering Lifecycle Management will be referred to as ELM. While everyone is encouraged to complete all sections of the demonstration guide, actual completion requirements vary by role: IBM Sales: Complete Parts 1 through 5 of this demonstration guide Record and submit a Stand and Deliver demonstration to be evaluated by management (details in the Your Learning plan) IBM Technical Sales: Complete all Parts of this demonstration guide Record and submit a Stand and Deliver demonstration to be evaluated by management (details in the Your Learning plan) Business Partner Sales: Complete Parts 1 through 5 of this demonstration guide Successfully pass a 5 question quiz found in the learn.ibm.com plan Business Partner Sales: Complete all Parts of this demonstration guide Successfully pass a 5 question quiz found in the learn.ibm.com plan IBM Sales and Tech Sales must develop and record a Stand & Deliver presentation. This video is intended to simulate delivery of a \u201clive\u201d demo in front of a client \u2014 on camera. IBMers will have flexibility in defining a hypothetical client, the pain points the client has, and the goals they aspire to achieve. The recording will then cover the seller\u2019s hands-on demonstration and pitch to the client of the value of the IBM solution using the environment and techniques of this lab. Specific criteria that must be demonstrated as part of the Stand & Deliver recordings is provided within the documentation that accompanies the Level 3 course in Your Learning. Business Partners must pass an accreditation quiz after completing the hands-on portion of the course. The quiz consists of multiple choice questions, with four possible responses (and only one correct answer) for each question. Hint: keep the demonstration guide and the associated IBM Technology Zone (TechZone) environment active while completing the quiz. Before jumping to part 1, please read the guidance below. Reading and understanding the information will save time while completing the steps in this guide. Helpful tips for using this demonstration guide and environment The IBM Engineering Lifecycle Management - Level 3 Demonstration Guide is organized in parts and sub-parts or chapters. Most chapters contain numbered steps, which are actions to be performed. Throughout the guide, images are used to help guide students through the demonstration. Warning The IBM Engineering Lifecycle Management user interface and data changes on a regular basis. Images captured in this guide may differ from the live demonstration environment in TechZone. The following styles of highlighting are utilized in images: Action highlight box: Illustrates where to click, enter, or select an item: Path/explore highlight box: Illustrates one of two things: the path to follow to get to a specific location in the user interface areas to explore To assist in navigating the browser-based user interface (UI), a birds-eye view of the UI is often provided. Expand these views by clicking on the > icon of the expandable section of documentation. Birds-eye view Copy to clipboard box: The text is copied to the clipboard. Click the copy icon (highlighted below) and then paste using the operating systems paste function, for example, entering Ctrl +v , Cmd +v , or right-click and select paste. Additionally, throughout the demonstration guide there are sample narration scripts. The short narratives can be utilized when performing client facing demonstrations. Sample narration In this demonstration we\u2019ll see how an infusion pump was engineered using the IBM ELM solution, in alignment with industry standards like ISO13485 and IEC 62304 for development and ISO 14971 for risk management. We\u2019ll break the demo up into four acts... Acronyms The following acronyms are used throughout this demonstration guide: - Application programming interfaces (APIs) - Control (ctrl) - The control key on keyboard - Engineering Lifecycle Management (ELM) - IBM Technology Zone (TZ) - Also referred to as TechZone - International Organization for Standardization (ISO) - International Electrotechnical Commission (IEC) - Virtual Machine (VM) - Identification (ID) - Software (SW) - Requirements Management (RM) - Change and Configuration Management (CCM) - Failure Modes and Effects Analysis (FMEA) - Risk Priority Number (RPN) - Requirements Quality Assistant (RQA) - Portable Document Format (PDF) - Architectural Management (AM) - Open Services for Lifecycle Collaboration (OSLC) - Engineering Test Management (ETM) - It is now time to proceed to Part 1, an overview of IBM Engineering Lifecycle Management.","title":"Introduction"},{"location":"#helpful-tips-for-using-this-demonstration-guide-and-environment","text":"The IBM Engineering Lifecycle Management - Level 3 Demonstration Guide is organized in parts and sub-parts or chapters. Most chapters contain numbered steps, which are actions to be performed. Throughout the guide, images are used to help guide students through the demonstration. Warning The IBM Engineering Lifecycle Management user interface and data changes on a regular basis. Images captured in this guide may differ from the live demonstration environment in TechZone. The following styles of highlighting are utilized in images: Action highlight box: Illustrates where to click, enter, or select an item: Path/explore highlight box: Illustrates one of two things: the path to follow to get to a specific location in the user interface areas to explore To assist in navigating the browser-based user interface (UI), a birds-eye view of the UI is often provided. Expand these views by clicking on the > icon of the expandable section of documentation. Birds-eye view Copy to clipboard box: The text is copied to the clipboard. Click the copy icon (highlighted below) and then paste using the operating systems paste function, for example, entering Ctrl +v , Cmd +v , or right-click and select paste. Additionally, throughout the demonstration guide there are sample narration scripts. The short narratives can be utilized when performing client facing demonstrations. Sample narration In this demonstration we\u2019ll see how an infusion pump was engineered using the IBM ELM solution, in alignment with industry standards like ISO13485 and IEC 62304 for development and ISO 14971 for risk management. We\u2019ll break the demo up into four acts...","title":"Helpful tips for using this demonstration guide and environment"},{"location":"#acronyms","text":"The following acronyms are used throughout this demonstration guide: - Application programming interfaces (APIs) - Control (ctrl) - The control key on keyboard - Engineering Lifecycle Management (ELM) - IBM Technology Zone (TZ) - Also referred to as TechZone - International Organization for Standardization (ISO) - International Electrotechnical Commission (IEC) - Virtual Machine (VM) - Identification (ID) - Software (SW) - Requirements Management (RM) - Change and Configuration Management (CCM) - Failure Modes and Effects Analysis (FMEA) - Risk Priority Number (RPN) - Requirements Quality Assistant (RQA) - Portable Document Format (PDF) - Architectural Management (AM) - Open Services for Lifecycle Collaboration (OSLC) - Engineering Test Management (ETM) - It is now time to proceed to Part 1, an overview of IBM Engineering Lifecycle Management.","title":"Acronyms"},{"location":"NextSteps/","text":"This guide provided information to assist IBM and Business Partner sellers and technical sellers in demonstrating IBM Engineering Lifecycle Management. Links to specific ELM topics were provided throughout this demonstration guide. Take the time to read the official IBM Engineering Lifecycle Management documentation to learn the full capabilities of the offering. Note, similar demonstration of ELM for other industries are available on IBM Technology Zone here . Finally, remember to complete the IBM Engineering Lifecycle Management Level 3 learning plan in either YourLearning (IBM employees) or learn.ibm.com (Business Partners). IBM Sales and IBM Technical sales must complete a Stand and Deliver exercise to validate their ability to demonstrate IBM Engineering Lifecycle Management to potential clients. Refer to the evaluation rubric in the learning plan when preparing the Stand and Deliver. Business Partners (both sellers and technical sellers) must pass the IBM Engineering Lifecycle Management Level 3 quiz from learn.ibm.com. Remember, take the quiz while the reservation to the TechZone environment is active. The Business Partner quiz verifies use of the demonstration environment and not general knowledge of the offering.","title":"Next steps"},{"location":"Part%201/01%20Introduction/","text":"The IBM Engineering Lifecycle Management solution or ELM, built on the Jazz platform, provides an integrated solution for systems and software engineering: requirements and risk management, models for systems design, test management, and workflow management which includes task, change management, and configuration management. It also includes reporting and analysis across all lifecycle artifacts. You can learn more about ELM here and the Jazz platform here . In this demonstration, see how an infusion pump was engineered using the IBM ELM solution, in alignment with industry standards like ISO 13485 and IEC 62304 for development and ISO 14971 for risk management. This demonstration assumes users have at least basic knowledge of IBM Engineering Lifecycle Management. Before proceeding, it is highly encouraged that users complete the Engineering Lifecycle Management Fundamentals Level 1 learning plan. The plan is accessible to IBM employees here and Business Partners here . The demonstration is divided into four acts: Act 1 - Design Planning and Dash-boarding. This act includes an introduction to the ELM platform and how the development work for the infusion pump is planned and tracked. Act 2 - Product Requirements. In Act 2, look at the key capabilities associated with requirements management including traceability and audit trails. Act 3 - Design Input. In this act, examine how client requirements are traced down to system requirements, how those requirements are checked for quality and reviewed for correctness, and how baselines are created with electronic signatures. In addition, learn how to perform risk management activities. Act 4 - Design Output. Next, learn how design verification is performed to prove requirement coverage and design validation is performed to demonstrate test case coverage, test case execution, and defect tracking. Act 5 - Engineering Insights for Metrics. NEED A DESCRIPTION WRITTEN FOR THIS!!!! The video below provides a sample introduction to the demonstration. Sample narration The IBM Engineering Lifecycle Management solution or ELM, built on the Jazz platform, provides an integrated solution for systems and software engineering: requirements and risk management, models for systems design, test management and workflow management which includes task, change and configuration management. It also includes reporting and analysis across all lifecycle artifacts. In this demonstration we\u2019ll see how an infusion pump was engineered using the IBM ELM solution, in alignment with industry standards like ISO13485 and IEC 62304 for development and ISO 14971 for risk management. We\u2019ll break the demo up into four acts: Starting with Design Planning. Here we\u2019ll get an introduction to the platform and take a look at how the development work for our Infusion Pump is planned and tracked. Then we\u2019ll take a look at Product Requirements where we\u2019ll see some of the key capabilities around requirements management including traceability and audit trails. After that we\u2019ll move on to Design Input where we\u2019ll see how client requirements are traced down to system requirements, how those requirements are checked for quality and reviewed for correctness and how we create baselines with electronic signatures. We\u2019ll also see how we can perform risk management activities. After that we\u2019ll move to Design Output where we\u2019ll see Design Verification to prove coverage of the requirements by the design and Design Validation where we\u2019ll show test coverage, test execution and defect tracking. Before proceeding to the actual demonstration, a few preparation steps must be complete first to configure the demonstration environment in IBM Technology Zone.","title":"The Demonstration"},{"location":"Part%201/02%20DemoPreparation/","text":"The following steps must be performed before delivering the demonstration. These steps should be performed several minutes prior to starting an actual client demonstration as the software services used take a few minutes to start and enter a ready state. Prepare the browser-based web client Open a browser window/tab using the URL found in the IBM Technology Zone email with the subject line \"Your environment is ready\". If prompted for a Virtual machine access password like in the image below, enter the Desktop password specified in the IBM Technology Zone email with the subject line \"Your environment is ready\" (highlighted in the above image) and click Submit . Click the play button to start the demonstration virtual machine (VM). Wait until the VM changes from Busy to Running before proceeding. Click on the computer screen icon to open the VM. Click anywhere on the background to display the Administrator login prompt. Log into Microsoft Windows using the ID: Administrator and Password: il0vedem0s . Note: the password contains two zero's and not capital Os. The Jazz Servers are set to auto-start when Windows starts up, but they will take a few minutes before they are ready. Click the Chrome browser icon on the taskbar at bottom of screen. Click the Chrome bookmark Project Dashboards and select the Infusion Pump bookmark. Important All user names and passwords have been cached in the Chrome browser. This demonstration uses the susan user ID. Click inside the User ID field and select susan from the list of users. Click the Log In button. The Infusion Pump demonstration dashboard is built of many different widgets as seen in the image below. When first loaded, some of the widgets may return an error (e.g. Error 400). This is expected and will be resolved later. Click the Mini Dashboard icon at top left of the Infusion Pump dashboard. Birds-eye view Click the Log in button in the IBM Engineering Requirements XXXX widget in the Mini Dashboard . A new browser tab will open. Click the Sign in button. The Username and Password fields are pre-populated with the susanreq ID and password. Do not change these fields. Close the web browser tab that was opened. Click anywhere on dashboard to hide the Mini Dashboard . To fix the broken widgets, slowly click through each of the Infusion Pump Requirements Project Dashboard's tabs. If after returning to the General tab the widget at far right is still reporting an error, try clicking the browser's refresh/reload button. Repeat this process a couple of times, the errors should resolve and data will appear in those widgets. In Act 1 , begin the journey to learn how to demonstrate IBM Engineering Lifecycle Management (ELM). Note, this is not a deep dive into IBM ELM, rather a brief overview of some of the major capabilities and benefits.","title":"Demonstration Environment Preparation"},{"location":"Part%201/02%20DemoPreparation/#prepare-the-browser-based-web-client","text":"Open a browser window/tab using the URL found in the IBM Technology Zone email with the subject line \"Your environment is ready\". If prompted for a Virtual machine access password like in the image below, enter the Desktop password specified in the IBM Technology Zone email with the subject line \"Your environment is ready\" (highlighted in the above image) and click Submit . Click the play button to start the demonstration virtual machine (VM). Wait until the VM changes from Busy to Running before proceeding. Click on the computer screen icon to open the VM. Click anywhere on the background to display the Administrator login prompt. Log into Microsoft Windows using the ID: Administrator and Password: il0vedem0s . Note: the password contains two zero's and not capital Os. The Jazz Servers are set to auto-start when Windows starts up, but they will take a few minutes before they are ready. Click the Chrome browser icon on the taskbar at bottom of screen. Click the Chrome bookmark Project Dashboards and select the Infusion Pump bookmark. Important All user names and passwords have been cached in the Chrome browser. This demonstration uses the susan user ID. Click inside the User ID field and select susan from the list of users. Click the Log In button. The Infusion Pump demonstration dashboard is built of many different widgets as seen in the image below. When first loaded, some of the widgets may return an error (e.g. Error 400). This is expected and will be resolved later. Click the Mini Dashboard icon at top left of the Infusion Pump dashboard. Birds-eye view Click the Log in button in the IBM Engineering Requirements XXXX widget in the Mini Dashboard . A new browser tab will open. Click the Sign in button. The Username and Password fields are pre-populated with the susanreq ID and password. Do not change these fields. Close the web browser tab that was opened. Click anywhere on dashboard to hide the Mini Dashboard . To fix the broken widgets, slowly click through each of the Infusion Pump Requirements Project Dashboard's tabs. If after returning to the General tab the widget at far right is still reporting an error, try clicking the browser's refresh/reload button. Repeat this process a couple of times, the errors should resolve and data will appear in those widgets. In Act 1 , begin the journey to learn how to demonstrate IBM Engineering Lifecycle Management (ELM). Note, this is not a deep dive into IBM ELM, rather a brief overview of some of the major capabilities and benefits.","title":"Prepare the browser-based web client"},{"location":"Part%202/01%20DesignPlanning/","text":"This demonstration flow is organized around the development process described in ISO 13485 and ISO 14971 for risk management. The video below illustrates how this Act of the ELM demonstration can be performed for a client. Sample narration Let\u2019s start here on the infusion pump team dashboard. Dash-boarding is a common capability across the ELM platform. Dashboards can be created for the project, for teams, or personal dashboards can be created for individual users. Dashboards give instant access to the project data that's most relevant to you, whether you\u2019re a Test Engineer looking at the current defect list or a Project Manager looking at the status of the project. And what\u2019s more - the data presented in the Dashboards is always up to date. For example, here on the General tab of our team dashboard we have a widget showing a graph of how many system requirements have linked test cases and how many don't. We\u2019ll see a few more later as we\u2019ll be using this dashboard as a jumping off point to various parts of the demonstration. Let's start with this Design Planning tab. Here we see various widgets focussed on the planning aspects of our project \u2013 we\u2019ll come back to those in a moment but first let's follow this link to the practice content. Practice content is a library of guidance for a specific workflow or standard that not only documents the process but provides guidance to engineers in their day to day work. Here for example we are looking at the practice library for the IEC 62304 standard which provides best practices for embedded software development for medical devices. Over here on the left, if we expand this category we can see the high level objectives of IEC 62304. If, on the other hand, we expand this category we can see that there is a delivery process which is a detailed, prescriptive workflow including activities and tasks on how to satisfy those objectives. Of course you can use your own process or customize this one. Let\u2019s select the SW Development Process Objective. Here we can see a detailed list of the Objectives under that heading. 5.1 is all about planning, 5.2 is about requirements, 5.3 is focussed on architecture and so on. By way of example lets click on 5.7.1 \u2013 which is all about verification \u2013 and specifies that the Software (SW) Verification Tests shall cover all requirements and include inputs, outputs and selected outcomes. Below the Objective we can see how it is mapped to the workflow. There is a list of the related elements in the detailed workflow guidance that helps our engineering teams to actually meet these objectives. Let's dive into one of those \u2013 the task to develop test cases. Here we can see the various roles involved, the input and output work products from the task and detailed, step by step guidance on how to perform the task and achieve the objective. The guidance can even go so far as to describe how to perform the task in a specific tool \u2013 we call those tool mentors. Let's move back to our dashboard and take a look at how all of that guidance translates into actual work products. In order to comply with IEC62304 and ISO13485, we have to have a plan. Our Infusion Pump has a plan which, in this case, is organized using iterative agile principles. At the bottom we can see the development plans including one for each program increment and an overall solution roadmap. Those development plans contain concepts from standard agile practices including epics, features, stories and tasks \u2013 in a moment we\u2019ll dive into one of those development plans and take a closer look but here on our dashboard we can get a clear view of the status of the project in many different ways. For example, on the left is a graph of all of the work items in the solution roadmap, grouped by their owner. On the right we can see some specific views that help with prioritizing the work according to agile principles. At the bottom we can see a traceability graph of where our features, capabilities and so on how been traced to requirements, design architecture and test cases. Let open the Solution Roadmap. Here we have two high level epics including this one - Deliver an external Infusion Pump. If we expand that epic we can see that it is broken down into Capabilities, and if we expand the Deliver Therapy capability, we can see that those are broken down into Features, and if we expand this Initiate Drug infusion Feature we can see that\u2019s been broken down into User Stories. Over on the right we can see which program increment or sprint these artifacts are planned for. But there are also detailed tasks that have to be performed at each of these levels and those tasks map back to the practice content we saw earlier as well as the classical V-Lifecycle. If I switch the view to show those tasks in the tree then we can see at Capability level we have tasks for both sides of the top of the V Lifecycle - On the left hand side we perform functional analysis for the deliver therapy use case and on the right, perform system qualification testing for that same use case. At Feature level, we move down the V and the tasks are around the development of a system architecture, and system integration testing. And if we expand this story then we move further down and the tasks are at the software level \u2013 developing and testing software architectures. This is only one of many views we can use to consume and modify our planning data. For example here is a classic Kanban view and we can move work items through the process quickly and easily by dragging and dropping between these columns. Hint Prior to performing a client facing demonstration, it is beneficial to run through all the steps of the demonstration prior to doing so in front of the client. Doing so will cache all the web pages which will save a significant amount of load time. This will improve the performance of the environment and alleviate any awkward moments waiting for pages to load. The following steps provide an overview of the ELM dashboard and the concept of \"dash boarding\". Click the Design Planning tab on the Infusion Pump Requirements Project Dashboard . Click the IEC62304 Practice Content link in the Useful Links widget. Notice a new browser tab is opened. Click the IEC62304 option in left-hand sidebar. Click the + next to IEC 62304 Objectives to expand the section. Click IEC 62304 SW Development Process . Click the Objective 5.7.1 link in the detailed list in main window. Note: scroll down if Objective 5.7.1 is not visible in the list. Click the Develop Test Cases link. Explore the Develop Test Cases task. Notice the roles associated with the task, the detailed guidance steps , and additional information links like Tool Mentors (scroll down as required). Close the Medical Devices browser tab by clicking the X and return to the Requirements Management (RM) browser tab. Now is a good time to explore the other widgets on the Design Planning tab of the Infusion Pump Requirements Project Dashboard . Click the Solution Roadmap widget title. Notice the Epics defined as work items on the roadmap. Click the icon next to the Deliver an external infusion pump work item. Notice the items with the Work Item Type equal to Capability . Click the icon next to the Deliver Therapy Capability . Notice the items with the Work Item Type equal to Feature . Click the icon next to the Initiate drug infusion Feature . Notice the items with the Work Item Type equal to Story . Notice the Planned For column. Select Roadmap with Tasks in the View As pull-down menu. Birds-eye view Notice the detailed under Initiate drug infusion with Work Item Type of Task and Story . In Act 2, explore how Project Requirements are tracked in ELM.","title":"Design Planning"},{"location":"Part%203/01%20ProductRequirements/","text":"The video below illustrates how this Act of the ELM demonstration can be performed for a client. Sample narration Now let's look at Product Requirements. Let's return to our dashboard and take a look at the requirement Artifacts for the infusion pump. Here we can see that we have Modules \u2013 or documents of requirements organized at various levels, but as you\u2019ll see in a few minutes, the requirements in those documents are all connected. Let's open the Product Requirements document and take a closer look. These requirements reflect the end user needs, of course there are other documents reflecting regulatory requirements, system requirements, software requirements and so on. Here we have a rich editing environment including pictures, rich text, tables and so on. The document has hierarchy \u2013 for example if we collapse the document we can see it has major sections; an introduction, a general description of the product and then more detailed requirements. If we expand the specific requirements section, we can see those requirements are organized into functional, performance, operational and so on. Another important facet of good requirements management is granularity. Every sketch, requirement and heading in this document is an independent, atomic artifact which means that it can be directly referenced. As you will see later, traceability is between atomic artifacts rather than documents. It also means that multiple users can all edit this same document at the same time and It facilitates re-use at the granular level - an artifact can be added to multiple documents so no more copy and paste and the overhead that comes with it. Artifacts have type \u2013 for example this document has Headings, Information Items and Product Requirements. Product Requirements have a Priority and a Status whilst the other types do not. A strong typing system like this reduces typographical errors and improves the consistency and report-ability of the data. Note that here we\u2019ve applied a view to quickly switch from the document style we saw previously to a spreadsheet style. Any of the artifact attributes may be shown as columns and views can also filter the data \u2013 for example this view shows only Product Requirements, along with their priority and status. This allows the user to quickly focus on what is important. Notice at the top of the page here is a notification that if we want to make any changes to this document then we have to do that as part of a change set. This project has been placed under change control. This allows the team to manage the impact of changes as well as ensuring that changes are only made with the appropriate approvals and that those changes are properly documented. Any changes that are made are automatically tracked and maintained for an audit trail. We can view the history of a single requirement \u2013 or in this case the entire document. This Audit History shows us every change that was made. Who made it, when it happened, the exact nature of the change and the change set in which it was made. Now let us look at traceability which is mandated in ISO 13485. Traditionally, traceability is maintained in separate documents such as spreadsheets \u2013 a manual process, prone to error, very costly to maintain and outdated as soon as the author clicks \u201csave\u201d. In the ELM platform traceability is added directly to the artifacts themselves \u2013 right here in the web browser. This view shows us not only the product requirements for the Infusion Pump but also the system requirements further downstream that satisfy them. For example \u2013 this product requirement \u2013 4968 is satisfied by this system requirement 4812. If we hover our mouse over a linked requirement \u2013 like 4812, we can see another common capability across the platform \u2013 Rich Hover. Whenever there is a link to another engineering artifact, the key information about it is seen without actually following the link. That might be a linked requirement as in this case, but it might also be a requirements engineer looking at a linked design \u2013 or a test engineer looking at a requirement they are testing against. It\u2019s a huge time saver. We can also easily see Gap Analysis \u2013 which of these requirements has no traceability downstream \u2013 for example here requirement 5023 has no system level coverage. Of course that kind of information is also easily exposed onto dashboards \u2013 as we\u2019ll see later. Here we can see Link Validity. Whenever two artifacts are linked \u2013 if one of those artifacts changes then the connection between them becomes suspect. Here for example the link between 4968 and 4812 is suspect because one of those requirements got changed. Now an analysis is required to confirm that the link is still valid. The ELM Platform automatically highlights when this happens so making that assessment is much easier and of course this is another common feature so that also applies for the linked models, test cases and so on. Click the Chrome bookmark Project Dashboards and select the Infusion Pump bookmark. Warning Do not try to click Project Dashboard in the menu bar as that will open the Change and Configuration Management (CCM) project dashboard and not the Requirements Management (RM) dashboard. Click the Artifacts tab in the main header bar. Birds-eye View Click on each folder in turn to show the hierarchy of requirements documents (Modules). Take note of the various Artifact Types of the documents, such as the 04 Hazard and Risk Analysis artifact types shown below. Click the Product Requirements folder, and then click Infusion Pump Product Requirements . Notice the graphics, rich text, tables, and hierarchy of the artifact. Refine the view. In the view's header bar, click the menu button and click Show Full Hierarchy and then Show 1 Level . Click the icon next to the 3 Specific Requirements content item. Note the various categories of requirements defined. Click the icon next to the 3.1 Functional Requirements content item. Click checkbox next to the first functional requirement: This device shall use a valve... . Notice that each object in the document is an independent, atomic artifact. This enables multiple engineers to author and edit the document at the same time. When a requirement is being edited, it is automatically locked preventing others from editing it, but other objects can be edited by others. It also facilitates reuse as any of these artifacts can be used in multiple documents without having to copy and paste content. Click the 1. Artifact Attributes link in the Views panel. Birds-eye view Notice that each artifact can be of a different type, and have different attributes based upon the type. A strong typing system reduces typographical errors and improves the consistency and report-ability of the data. Click the 2. Product Requirements link in the Views panel. Notice the views can also filter the displayed document data. In this case filtering out Headings and showing only Product Requirements . Next, explore the configuration and change management capabilities in ELM.","title":"Product Requirements"},{"location":"Part%203/02%20ConfigAndChangeMgmt/","text":"Notice the banner at the top of the Artifacts tab. The message informs users that the module is under change management. Later in the demonstration script a new change set will be created. For now, learn about the audit and traceability capabilities of ELM. Click the Open History menu item under the hamburger menu icon. Birds-eye view Click the Audit History tab. Click the Expand All link. Notice the full audit trail. From this view, auditors can view who changed what, when the change was made, and in which change set . Click the Close History button. Click the 3. Satisfied By link in the Views panel. Notice the columns can show traceability . Here, traceability is seen in the Satisfied By column. Rows with data in the Satisfied By column provide links to the downstream system requirements that satisfy these higher-level requirements. Notice that several rows have no information in the Satisfied By column. These empty fields illustrate gaps in the requirements providing a gap analysis traceability view. Hover the mouse over the 4968 link in the ID column (don't click the link). Notice the additional details about the requirement that are visible by simply hovering over the item in the table. Click the first icon in the Satisfied By columns. Notice the options available to set the link validity for the requirement. Traditionally, traceability is maintained in separate documents such as spreadsheets \u2013 a manual process, prone to error, very costly to maintain, and usually outdated as soon as the author clicks \u201csave\u201d. Here traceability is added, maintained, and tracked directly in the IBM solution and can easily be reported on. To learn more about link validity go here . For Act 3, remain on the current browser page and learn about ELM's design input capabilities.","title":"Change Management"},{"location":"Part%204/01%20RQA/","text":"The video below illustrates how this Act of the ELM demonstration can be performed for a client. Sample narration Next, let us look at Design Input. We are starting where we left off \u2013 here in the Product Requirements document, looking at the traceability downstream to System Requirements. Now, let us follow one of those links. We are now looking at the System Requirements document. If we apply this view we can see the traceability back to the product requirements upstream as well as to the software requirements downstream. For example \u2013 system requirement 4812 satisfies product requirement 4968 and itself is satisfied by three software requirements. Next we\u2019ll put these requirements through a review cycle but before we do that we\u2019re going to use the power of AI to check and improve their quality. It\u2019s likely that we\u2019ll need to edit the requirements so let us start by creating a Change Set to encapsulate those changes. Note that our engineer Susan is now working in her own private area \u2013 any changes made here are isolated from the rest of the team until they are delivered. In a real project we would trace this change set to a work item and the platform can even be configured so that we cannot deliver any changes back to the team without a work item with the appropriate approvals on it \u2013 you will see those approvals in a moment when we look at reviews. For now let us just check our requirements. This view filters the document to show only System Requirements and also adds columns for some attributes that will store the result of our quality check \u2013 which is useful for reporting later. Let's select all of our requirements and ask the Requirements Quality Assistant or RQA to check them. RQA analyses the requirements using Watson Natural Language Processing and then scores them against the rules defined in the INCOSE Requirements Engineering handbook \u2013 or indeed against custom rulesets for specific projects or domains. Here we can see that most of the requirements have scored well \u2013 and a couple need some work. Take a look at one of those. First RQA gives us the reason for the score \u2013 in this case we have an Unclear Term \u2013 the phrase In A Clear manner is ambiguous and subjective which makes it very difficult to test. Detailed guidance on how to improve poorly written requirements is included \u2013 an essential tool to help less experienced requirement writers improve their skills. Note that this isn\u2019t something as simple as a keyword search \u2013 the requirement below this one also has the word clear in it \u2013 but in that context it\u2019s not ambiguous and the requirement scores 100. RQA goes beyond simple keyword searches, it can understand context, meaning and intent. We can fix that requirement fairly easily \u2013 in this case that ambiguous phrase is actually not needed at all so let's remove it \u2013 and then ask RQA to recheck that requirement. Identifying and fixing quality issues like ambiguous, incomplete and poorly structured requirements before a review saves time and reduces cost \u2013 domain experts can spend their valuable time reviewing the intent of a requirement rather than wasting time fixing things like inconsistencies. In a real project we would fix all of the issues, deliver the requirements back to the team and create a Baseline of the requirements ready for the review. As this is a demo, I\u2019ve already created that baseline and the review so I\u2019m just going to discard this change set and then I\u2019ll switch from Susans personal editing area back to the team area. As per ISO 13485, requirements need to be approved and reviewed. Lets return to our dashboard and see how a review cycle takes place. Here we have a work item to review the System Requirements for the Infusion Pump. Here on the approvals tab there are several approvals that are required to complete this work \u2013 the reviews themselves and a final managerial approval. Here on the links tab there are several links: The review baseline is the document that our reviewers have been asked to review. This child task is an issue that was raised during the review and lastly the approved baseline is a link to the baselined document after the review was completed and the requirements were approved. Let's start by clicking the Review baseline link. Note that the system requirements document has opened \u2013 but in the context of a Baseline, and so these artifacts are all frozen and cannot be edited. Let's go back to the work item and click the child task. Here we can see that this is an Issue \u2013 raised by one of our reviewers, Dan, and he\u2019s assigned the work item to Susan to resolve. At the bottom we can see a description of Dan\u2019s issue \u2013 he doesn\u2019t think the requirement is complete enough and has also identified a potential missing requirement. Further down we can see that Susan has replied \u2013 she agreed and made some changes to the document in response to the review comment. On the Approvals tab, Dan added himself as the approver. Note that the parent review work item would not have been allowed to close until all of its children were also approved and closed \u2013 so any issues raised during the review would prevent it from completing until they were addressed. On the links tab there is a link to the requirement that had a problem \u2013 which helped Susan identify it in the document. Let's follow that link and take a look. Again we are in the context of the review baseline and the requirement reads The system shall perform a self test on initiation. As we saw in the work item, Susan agreed with the review comment that is was not complete enough and made some changes \u2013 after that the review work item was approved and closed, and another baseline was taken and electronically signed. Let\u2019s switch to that baseline and see what happened. It may not be immediately obvious what the changes were but the ELM Platform allows us to compare artifacts to see any differences \u2013 in this case let\u2019s compare this approved baseline to the original review baseline. Here we can see the additional requirement that Susan added as well as the existing requirement that was modified \u2013 highlighted in blue. We can dive deeper into that requirement and see the modifications that were made. Let's now close that comparison and return to the document. Next we can follow this link to the actual approved baseline where we can see its electronic signature. Now let\u2019s look at risk management. First we\u2019ll return to our project dashboard and once again we\u2019ll switch back to the main team working area. Here on our dashboard we have two tabs of interest \u2013 FMEA or Failure Modes and Effects Analysis and Operational Hazard Analysis. There are many similarities between the two \u2013 they both examine failure modes, effects and causes \u2013 the primary difference is that operational hazard analysis focuses on what could go wrong if the product is used incorrectly whilst FMEA focuses on the identification of possible failures in the design of the product components. Let's start with FMEA. Our dashboard is surfacing the results of the FMEA analysis in a consumable way \u2013 for example at the top here we have a traceability view from the system requirement to a potential failure related to that requirement, to the safety requirement that was created to mitigate against the risk of that happening. On the right we have more of a metrics view \u2013 how many failure modes are mitigated by safety requirements and how many are not. These are not just pictures of course this is all live data. Let\u2019s use the traceability view to navigate into the FMEA document and see the analysis. Here we can see the columns of information that allow us to perform the FMEA \u2013 the identified failure mode, the effects of that failure, its potential causes and any current controls we have in place. Those assessments allow us to assign numeric values for Severity, Probability and Detection \u2013 and those can then be used to calculate the Risk Priority Number or RPN which is a simple measure of comparison. The platform can help by automating steps and performing calculations on the data. Let's see an example of this in action \u2013 we\u2019ll start by making a change set so we can make some changes to this data. Then let's edit this Risk Priority Number and actually delete that value. Now in our mini-dashboard we can expand this RPN Calculator which will perform that calculation for us and populate the field again. Of course that\u2019s a very simple example and a very simple calculation but it shows how the basic capabilities of the platform may be extended with automation widgets like these. OK lets go ahead and discard that change set \u2013 and as before we\u2019ll also switch back to the team area. Back on our Project Dashboard lets now select Operational Hazard Analysis. That analysis is performed in much the same way as FMEA with the major difference being that these hazards are the result of user error rather than device failure. The ELM Platform allows for automatic generation of federated documentation. Here we have a link to an automatically generated document that combines both of those analyses into a Risk Management File. Click the 4812 requirement link in the Satisfied By column. Click the 3. Up and Downstream Satisfaction in the Views panel. Now use Requirements Quality Assistant (RQA) to check the quality of the requirements. RQA can populate the scores returned and the reasons for any low scores as attributes in the module. For these attributes to be populated, the module must be writable and so you will start by creating a change set . A change set allows a team to manage the impact of changes and ensures that changes are only made with the appropriate approvals, and that those changes are properly documented. Typically, this option is enabled when the project reaches a milestone and/or stable state. Click the current context button at top right of header bar. Birds-eye view Click Create Change Set... . Enter Checking Requirements Quality in the Name text entry field. Click the Create button. Click the current context button and verify the current change set is Checking Requirements Quality . Click the Mini Dashboard icon. Click the Pin icon to keep the Mini Dashboard open. Click the 9. RQA link in the Views panel. Take notice of the columns in the RQA view: RQA Score and Issues Found by RQA . Click the double arrow icon in the sidebar to collapse both the left and right-hand sidebars. Hover the mouse between the Views panel and the table of Requirements . Click the checkbox next to the first requirement . Scroll down to bottom of list, hold down the Shift key, and click the checkbox for the last requirement to select all the requirements. Click the Check selected button in the RQA panel of the Mini Dashboard . It will take a few seconds for the RQA scoring to complete. Drag the right-hand side of the Mini Dashboard to the right to expand it. Notice the scores returned have been recorded as attributes and the reason for any low scores. Click the 5107 requirement in the RQA panel of the Mini Dashboard . Warning The RQA team releases a new version every 2 weeks. It is impossible to keep training material up to date with that schedule. The scores returned by RQA may therefore be completely different than the ones recorded in this document. If this is the case, then skip fixing the requirement below and discard the change set. Click Show details under the 5107 requirement . In the main table, Double-click inside the text of the 5107 requirement to edit it. Delete the text in a clear manner and click away from the requirement to apply the change. Now that the ambiguity of the requirement is removed, recheck the modified artifact. Click the recheck icon in the RQA panel of the Mini Dashboard for the updated requirement. Notice the 5107 requirement now scores a 100. Checking the requirements for quality is not a replacement for a review rather an enhancement. Check and fixing quality before going into a review means that domain experts can spend their valuable time reviewing the intent of the requirement rather than wasting time on poorly written requirements. In a real project all requirements would be checked and fixed before creating a baseline and moving into a review cycle. For this demonstration environment, the changes will be discarded. Click the Pin to collapse the Mini Dashboard > Click away from the Mini Dashboard so it slides back in place. Click the current context button . Click Discard Change Set... . Click the Discard the Change Set button. Important Creating a change set moves the context out of the base global configuration into a personal stream (Susan's in this environment). Discarding (or delivering) the change set does not return to the base global configuration \u2013 one must switch back to the base \u2018variant\u2019 of the product using the favorites menu. Click the current context button . Click the dropdown button to see the recently used and favorite configurations. Click the Infusion Pump Base global stream. Click the collapsed left-hand sidebar to expand and reveal the Views panel. Next, examine the Review process in ELM.","title":"Requirements Quality Assistant"},{"location":"Part%204/02%20Reviews/","text":"Click the Project Dashboard tab in the top header bar. Notice there are several reviews on the dashboard. Birds-eye view Click 470: Review Infusion Pump System Requirements . Note that the 470: Review Infusion Pump System Requirements is already complete (green checkbox). In a real project a quality review would be performed before baselining requirements and before entering a review cycle. Notice that Review 470 is a Work Item . Click the Approvals tab. Notice the different types of approvals and approvers . Click the Links tab. Notice the different Links shown. Note that there are links to the baseline of the requirements the review was created against, another link to the final approved baseline (created after the review), and a link to a child work item (this was a problem identified during the review). Click the Review baseline link. Notice that the link opens a view to the module in the context of the Review Baseline . Click the web browser Back button. Click the 483: Issue with Self Test Requirement link. Notice the information captured for Problem 483 . Scroll down and notice the comment added by Susan. Scroll up and click the Approvals tab. Notice that Dan has added himself as the approver for the work item . A parent review work item cannot be closed until all children have been approved and closed. Click the Links tab. Click the 5103: The system shall perform a self test on initiation under Related Artifacts . Notice the link returns to the Requirements Review Baseline with 5103: The system shall perform a self test on initiation selected. Click the current configuration button . Click the Switch button. Click the Requirements Management Configuration tab in the Configuration Context dialog. Select Baselines in the Component pull-down menu. Enter an * in the search box to show all Baselines . Click Infusion Pump Base Requirements Approved in the list of All configurations . Click the OK button. Click the current context button . Click Compare Configuration... under Local Configuration . Click Baselines in the Component pull-down menu. Select Infusion Pump Base Requirements Review in the table. Click OK . Click Next two (2) times in the Compare wizard . Click In both, but different (2) button at the bottom of the side bar. Birds-eye view Click 4777: Infusion Pump System Requirements . Click the 5103 requirement to select it in left-hand table. Bug Ignore the orange boxes. This is a known issue with the user interface. Click the Show changes link. If the Show changes link doesn't appear, hover the mouse over the text for the requirement. Explore the information provided on the comparison screen. Click the X at top right to close the Artifact compare dialog. Click the Close button to close the Comparison wizard . The platform can be configured such that changes cannot be delivered unless those changes are linked to a work item with the appropriate approvals. In this project, after the review cycle was completed and approved, a new baseline was taken and signed with an electronic signature as shown in the next steps. Click the current configuration button. Click the Infusion Pump Base Requirements Approved local configuration. Click the Electronic Signatures tab. Click the Show Details link. Review the Electronic Signatures details and then click the OK button. The Review also has electronic signatures both for the Approval and also the final state change to Approved \u2013 this only appears in the History of the Review work item. Feel free to show that before showing Risk Management below. The project dashboard also has a Reviews tab showing reports and summaries of Reviews.","title":"Reviews"},{"location":"Part%204/03%20RiskManagement/","text":"Click the Project Dashboard tab in the top header bar. Click the current context button. Click the dropdown button to see the recently used and favorite configurations. Click Infusion Pump Base under Favorite Global Configurations . Notice the FMEA and Operational Hazard Analysis tabs on the Infusion Pump Requirements Project Dashboard . There are many similarities between operational hazard analysis and Failure Modes and Effects (FMEA) . Both examine functions, failure \u2018modes\u2019 (equipment failures or incorrect operations), effects and causes. The primary difference is that operational hazard analysis focuses on what could go wrong if the device is not used correctly. FMEA focuses on identification of potential hazards in the design. Additionally, a hazard analysis focuses solely on safety hazards whereas the scope of an FMEA covers safety as well as performance, quality and reliability. Click the FEMA tab. Explore the FEMA page. Note that this tab is surfacing analysis reports such as traceability from System Requirement to Failure Mode to the Safety Requirement that mitigates it \u2013 and metrics such as how many Failure modes have mitigations versus those that do not. Right-click the first Failure Mode box and click Open Artifact . Click FMEA View in the Views panel. Explore the various columns in the analysis. Click the current context button . Click Create Change Set... . Enter RPN in the Name field and click OK . Double-click in the Risk Priority Number field of the first row of the table. Delete the value 12 and click OK so the cell is empty. Expand the Mini Dashboard and pin it open. Expand the FMEA-RPN widget in the Mini Dashboard . Scroll down in the FMEA-RPN widget and click the Calculate RPN button. Notice that the correct value is re-inserted into the RPN cell. Click the current context button . Click Discard Change Set.. . Click Discard the Change Set in the pop-up dialog. Click the Unpin icon in the Mini Dashboard and click away from the Mini Dashboard . Switch back to Infusion Pump Base under Favorite Global Configurations in the current context button . Click the Project Dashboard in the top header bar. Click the Operational Hazard Analysis tab. Explore the Operational Hazard Analysis tab. Note, the tab has a table of hazards containing their possible causes, actions, and the safety requirements that mitigate the hazards. The analysis is done in a similar way as FMEA so no need to dive into this one. Click the Risk Management File link in the Generated Documentation widget. Birds-eye view Explore the Risk Management File generated document. This document was generated from the platform by Document Builder and delivered in Portable Document Format (PDF) for convenience. The Risk Management File combines both types of fault and hazard analysis into a single document and includes both tables and metric graphs. Close the Risk Management File and Requirements Management (RM) browser tabs.","title":"Risk Management"},{"location":"Part%205/01%20DesignVerification/","text":"The video below illustrates how this Act of the ELM demonstration can be performed for a client. Sample narration Next, look at Design Output \u2013 starting with design verification. Let's use the traceability view here to return to our System Requirements and then Lets apply another view to that document \u2013 one that shows us elements from our design that satisfy these system requirements. Here we also have gap analysis and link validity, this time between the requirements and the design. Rich Hover can be used to great effect here, allowing requirements engineers to see linked design artifacts such as this architecture diagram without ever having to open or navigate a model. If we do want to explore further then we can click on any one of these links and navigate into that design. These are not just pictures \u2013 this is the actual model that contains not only the architecture but also the functional analysis, the behavior and so on. If we click this state machine symbol in the corner of the Pump Channel \u2013 we can see its state based behavior. Models like this may be executed to verify and validate the system requirements they are traced to or even generate production quality source code if the model is at the software level. If we return to our Project Dashboard and select the Design Verification tab we can see more analysis. On the right we have a traceability view of the designs coverage of the requirements \u2013 and again this is not a picture \u2013 this is live data that we can use for analysis and navigation. On the left that same traceability is presented as a table at the bottom, and as pie graph of coverage metrics at the top. If not already there, return to the FMEA tab of the Project Dashboard . Right-click on the first System Requirement and click Open Artifact . Click 5. Satisfied by Architecture in the Views panel. Explore the Satisfied by Architecture view. Scroll down to where 5037 The infusion pump shall support six separate pump channels. is visible in the table. Hover over the linked Object Model Diagram and click Show More . Note the Show in Rhapsody link. Rhapsody Model Manager is a web-based solution that integrates with Rhapsody and OSLC Jazz-based tools to provide lifecycle traceability for models, wider availability of models to stakeholders by making them available on the web, and source control / configuration management. This Architectural Management (AM) solution enables models to be first-class participants in the development lifecycle. Rhapsody Model Manager has not been in this demonstration environment. Clicking on the link will display an error message. Close the Infusion Pump System Requirement browser tab.","title":"Design Verification"},{"location":"Part%205/02%20DesignValidation/","text":"If not already there, return to the FMEA tab of the Project Dashboard . Right-click on one of the System Requirements and click Open Artifact . Click 6. Validated by Test Method in the Views panel. Notice the linked test cases, link validity, and also the current status of the linked text case execution. Click the failed test case link to open the test case. Notice the right-hand sidebar. Notice this test case is part of a Test Plan and that it validates a requirement, has a related test script , a link to the most recent test execution result , and also a linked defect which was raised when the last test execution failed. Birds-eye view Hover the the mouse over the linked requirement to show rich hover information. Engineering Test Management (ETM) provides a collaborative hub for systems and software quality across virtually any platform and type of testing. Teams can collaborate and share information easily and seamlessly \u2013 here for example a tester can see the requirement they are testing without the need to open the requirements tool or refer to a spreadsheet. Test Plans, Test Cases, Test Scripts \u2013 all traced to developments, requirements, and designs really help when you\u2019re trying to prove compliance to industry standards. Click the Infusion Pump Testing dashboard under Project Dashboards . Explore each of the dashboard tabs to show the test-specific data. Click the Planning tab. Click the System Test Protocol test plan. Click Test Objectives in the sidebar. Click the ISO 13485 for quality management link in the Test Objectives widget. Close the new browser tab opened to iso.org . Click Risk Assessment in the sidebar. Explore the content in the Risk Assessment widget. Click Requirement Collection Links in the sidebar. Click Coverage in the View As pull-down menu. Click the Reconcile requirements icon above the Links table. Click 3 of the requirements checkboxes. Click the menu pulldown icon, but do not click any of the Generate ... actions. Click Cancel . Click Development Plan Links in the sidebar and explore the page. Click Test Cases in the sidebar and explore the page. Click Test Case Results in the sidebar and explore the page. Click Formal Review in the sidebar and explore the page. Click Test Case Results in the sidebar and explore the page. Notice the test has a test script called Maximum Flow Rate Test . Click 109: Each pump channel shall... link in the Test Case column. Click Test Scripts in the sidebar. Notice that this is a manual test script. Click Manual Steps in the sidebar. Notice this is a manual test script and the steps and expected results are displayed. Test Cases can be manual or automated. For automated test cases RQM can invoke the test and gather the results here in the hub. Automated tests could be executed by testing tools like those National Instruments. Manual tests may be performed in the lab using the web browser, but may also be exported out so that the tester can use a smart device like an iPad to perform the tests in the field \u2013 and then upload the results when they come back to the office or lab. Click the Run pulldown at the top of the page, but do not click Run . Birds-eye view Click Test Execution Records in the sidebar. Notice this shows all the execution runs of this test case, which test script was executed, and the result of the test. Click the Failed symbol in the most recent test record. Scroll down and note the steps taken by the tester and the results. Click the defect labeled 392: Failing Test case... . Click the Links tab. Notice the links to the artifacts affected by the defect. Close the Problem 392 browser tab. Click the Design Validation tab. Explore the Design Validation analysis and reporting of the test data.","title":"Design Validation"},{"location":"Part%206/01%20EngineeringInsights/","text":"If not already there, return to the Infusion Pump Requirements Project Dashboard . Click the Lifecycle Statistics tab. Notice the view shows completion metrics between the different layers of requirements, and between requirements and tests. Click the red box for Product Requirements . Notice the view shows the requirements that have not been satisfied. From here, one can navigate into each requirement using Engineering Requirements Management (ERM). That concludes the demonstration of ELM.","title":"Engineering Insights for Metrics"}]}