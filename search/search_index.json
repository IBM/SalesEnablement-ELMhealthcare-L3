{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the IBM Engineering Lifecycle Management Level 3 demonstration guide! The goal of this demonstration guide is to provide sellers and technical sellers from IBM and Business Partners with the knowledge and tools to perform hands-on demonstrations of IBM Engineering Lifecycle Management. Throughout this demonstration guide IBM Engineering Lifecycle Management will be referred to as COS. While everyone is encouraged to complete all sections of the demonstration guide, actual completion requirements vary by role: IBM Sales: Complete Parts 1 through 5 of this demonstration guide Record and submit a Stand and Deliver demonstration to be evaluated by management (details in the Your Learning plan) IBM Technical Sales: Complete all Parts of this demonstration guide Record and submit a Stand and Deliver demonstration to be evaluated by management (details in the Your Learning plan) Business Partner Sales: Complete Parts 1 through 5 of this demonstration guide Successfully pass a 5 question quiz found in the learn.ibm.com plan Business Partner Sales: Complete all Parts of this demonstration guide Successfully pass a 5 question quiz found in the learn.ibm.com plan IBM Sales and Tech Sales must develop and record a Stand & Deliver presentation. This video is intended to simulate delivery of a \u201clive\u201d demo in front of a client \u2014 on camera. IBMers will have flexibility in defining a hypothetical client, the pain points the customer has, and the goals they aspire to achieve. The recording will then cover the seller\u2019s hands-on demonstration and pitch to the client of the value of the IBM solution using the environment and techniques of this lab. Specific criteria that must be demonstrated as part of the Stand & Deliver recordings is provided within the documentation that accompanies the Level 3 course in Your Learning. Business Partners must pass an accreditation quiz after completing the hands-on portion of the course. The quiz consists of multiple choice questions, with four possible responses (and only one correct answer) for each question. Hint: keep the demonstration guide and the associated IBM Technology Zone (TechZone) environment active while completing the quiz. Before jumping to part 1, please read the guidance below. Reading and understanding the information will save time while completing the steps in this guide. Helpful tips for using this demonstration guide and environment The IBM Engineering Lifecycle Management - Level 3 Demonstration Guide is organized in parts and sub-parts or chapters. Most chapters contain numbered steps, which are actions to be performed. Throughout the guide, images are used to help guide students through the demonstration. Warning The IBM Engineering Lifecycle Management user interface changes on a regular basis. Images captured in this guide may differ from the live demonstration environment in TechZone. The following styles of highlighting are utilized in images: Action highlight box: Illustrates where to click, enter, or select an item: Path/explore highlight box: Illustrates one of two things: the path to follow to get to a specific location in the user interface areas to explore To assist in navigating the browser-based user interface (UI), a birds-eye view of the UI is often provided. Expand these views by clicking on the > icon of the expandable section of documentation. Birds-eye view Copy to clipboard box: The text is copied to the clipboard. Click the copy icon (highlighted below) and then paste using the operating systems paste function, for example, entering Ctrl +v , Cmd +v , or right-click and select paste. Additionally, throughout the demonstration guide there are sample narration scripts. The short narratives can be utilized when performing client facing demonstrations. Sample narration In this demonstration we\u2019ll see how an infusion pump was engineered using the IBM ELM solution, in alignment with industry standards like ISO13485 and IEC 62304 for development and ISO 14971 for risk management. We\u2019ll break the demo up into four acts... Acronyms The following acronyms are used throughout this demonstration guide: - Application programming interfaces (APIs) - Control (ctrl) - The control key on keyboard - It is now time to proceed to Part 1, an overview of IBM Engineering Lifecycle Management.","title":"Introduction"},{"location":"#helpful-tips-for-using-this-demonstration-guide-and-environment","text":"The IBM Engineering Lifecycle Management - Level 3 Demonstration Guide is organized in parts and sub-parts or chapters. Most chapters contain numbered steps, which are actions to be performed. Throughout the guide, images are used to help guide students through the demonstration. Warning The IBM Engineering Lifecycle Management user interface changes on a regular basis. Images captured in this guide may differ from the live demonstration environment in TechZone. The following styles of highlighting are utilized in images: Action highlight box: Illustrates where to click, enter, or select an item: Path/explore highlight box: Illustrates one of two things: the path to follow to get to a specific location in the user interface areas to explore To assist in navigating the browser-based user interface (UI), a birds-eye view of the UI is often provided. Expand these views by clicking on the > icon of the expandable section of documentation. Birds-eye view Copy to clipboard box: The text is copied to the clipboard. Click the copy icon (highlighted below) and then paste using the operating systems paste function, for example, entering Ctrl +v , Cmd +v , or right-click and select paste. Additionally, throughout the demonstration guide there are sample narration scripts. The short narratives can be utilized when performing client facing demonstrations. Sample narration In this demonstration we\u2019ll see how an infusion pump was engineered using the IBM ELM solution, in alignment with industry standards like ISO13485 and IEC 62304 for development and ISO 14971 for risk management. We\u2019ll break the demo up into four acts...","title":"Helpful tips for using this demonstration guide and environment"},{"location":"#acronyms","text":"The following acronyms are used throughout this demonstration guide: - Application programming interfaces (APIs) - Control (ctrl) - The control key on keyboard - It is now time to proceed to Part 1, an overview of IBM Engineering Lifecycle Management.","title":"Acronyms"},{"location":"NextSteps/","text":"","title":"Next steps"},{"location":"Part%201/01%20Introduction/","text":"The IBM Engineering Lifecycle Management solution or ELM, built on the Jazz platform, provides an integrated solution for systems and software engineering: requirements and risk management, models for systems design, test management and workflow management which includes task, change and configuration management. It also includes reporting and analysis across all lifecycle artifacts. You can learn more about the Jazz platform here . In this demonstration, see how an infusion pump was engineered using the IBM ELM solution, in alignment with industry standards like ISO 13485 and IEC 62304 for development and ISO 14971 for risk management. The demonstration is divided into four acts: Act 1 - Design Planning and Dash-boarding. This act includes an introduction to the ELM platform and how the development work for the infusion pump is planned and tracked. Act 2 - Product Requirements. In Act 2, look at the key capabilities associated with requirements management including traceability and audit trails. Act 3 - Design Input. In this act, examine how customer requirements are traced down to system requirements, how those requirements are checked for quality and reviewed for correctness, and how baselines are created with electronic signatures. In addition, learn how to perform risk management activities. Act 4 - Design Output. Next, learn how design verification is performed to prove requirement coverage and design validation is performed to demonstrate test case coverage, test case execution, and defect tracking. Act 5 - Engineering Insights for Metrics. NEED A DESCRIPTION WRITTEN FOR THIS!!!! Before proceeding to the actual demonstration, a few preparation steps must be complete first to configure the demonstration environment in IBM Technology Zone.","title":"The Demonstration"},{"location":"Part%201/02%20DemoPreparation/","text":"The following steps must be performed before delivering the demonstration. These steps should be performed several minutes prior to starting an actual client demonstration as the software services used take a few minutes to start and enter a ready state. Prepare the browser-based web client Open a browser window/tab using the URL found in the IBM Technology Zone email with the subject line \"Your environment is ready\". If prompted for a Virtual machine access password like in the image below, enter the Desktop password specified in the IBM Technology Zone email with the subject line \"Your environment is ready\" (highlighted in the above image) and click Submit . Click the play button to start the demonstration virtual machine (VM). Wait until the VM changes from Busy to Running before proceeding. Click on the computer screen icon to open the VM. Click anywhere on the background to display the Administrator login prompt. Log into Microsoft Windows using the ID: Administrator and Password: **il0vedem0s. Note: the password contains two zero's and not capital Os. The Jazz Servers are set to auto-start when Windows starts up, but they will take a few minutes before they are ready. Click the Chrome browser icon on the taskbar at bottom of screen. Click the Chrome bookmark Project Dashboards and select the Infusion Pump bookmark. Important All user names and passwords have been cached in the Chrome browser. This demonstration uses the susan user ID. Click inside the User ID field and select susan from the list of users. Click the Log In button. The Infusion Pump demonstration dashboard is built of many different widgets as seen in the image below. When first loaded, some of the widgets may return an error (e.g. Error 400). This is expected and will be resolved later. Click the Mini Dashboard icon at top left of the Infusion Pump dashboard. Birds-eye view Click the Log in button in the IBM Engineering Requirements XXXX widget in the Mini Dashboard . A new browser tab will open. Click the Sign in button. The Username and Password fields are pre-populated with the susanreq ID and password. Do not change these fields. Close the web browser tab that was opened. Click anywhere on dashboard to hide the Mini Dashboard . In Act 1 , begin the journey to learn how to demonstrate IBM Engineering Lifecycle Management (ELM). Note, this is not a deep dive into IBM ELM, rather a brief overview of some of the major capabilities and benefits.","title":"Demonstration Environment Preparation"},{"location":"Part%201/02%20DemoPreparation/#prepare-the-browser-based-web-client","text":"Open a browser window/tab using the URL found in the IBM Technology Zone email with the subject line \"Your environment is ready\". If prompted for a Virtual machine access password like in the image below, enter the Desktop password specified in the IBM Technology Zone email with the subject line \"Your environment is ready\" (highlighted in the above image) and click Submit . Click the play button to start the demonstration virtual machine (VM). Wait until the VM changes from Busy to Running before proceeding. Click on the computer screen icon to open the VM. Click anywhere on the background to display the Administrator login prompt. Log into Microsoft Windows using the ID: Administrator and Password: **il0vedem0s. Note: the password contains two zero's and not capital Os. The Jazz Servers are set to auto-start when Windows starts up, but they will take a few minutes before they are ready. Click the Chrome browser icon on the taskbar at bottom of screen. Click the Chrome bookmark Project Dashboards and select the Infusion Pump bookmark. Important All user names and passwords have been cached in the Chrome browser. This demonstration uses the susan user ID. Click inside the User ID field and select susan from the list of users. Click the Log In button. The Infusion Pump demonstration dashboard is built of many different widgets as seen in the image below. When first loaded, some of the widgets may return an error (e.g. Error 400). This is expected and will be resolved later. Click the Mini Dashboard icon at top left of the Infusion Pump dashboard. Birds-eye view Click the Log in button in the IBM Engineering Requirements XXXX widget in the Mini Dashboard . A new browser tab will open. Click the Sign in button. The Username and Password fields are pre-populated with the susanreq ID and password. Do not change these fields. Close the web browser tab that was opened. Click anywhere on dashboard to hide the Mini Dashboard . In Act 1 , begin the journey to learn how to demonstrate IBM Engineering Lifecycle Management (ELM). Note, this is not a deep dive into IBM ELM, rather a brief overview of some of the major capabilities and benefits.","title":"Prepare the browser-based web client"},{"location":"Part%202/01%20DesignPlanning/","text":"This demonstration flow is organized around the development process described in ISO 13485 and ISO 14971 for risk management. Hint Prior to performing a client facing demonstration, it is beneficial to run through all the steps of the demonstration prior to doing so in front of the client. Doing so will cache all the web pages which will save a significant amount of load time. This will improve the performance of the environment and alleviate any awkward moments waiting for pages to load. Sample narration In this demonstration we\u2019ll see how an infusion pump was engineered using the IBM ELM solution, in alignment with industry standards like ISO13485 and IEC 62304 for development and ISO 14971 for risk management. We\u2019ll break the demo up into four acts: Starting with Design Planning. Here we\u2019ll get an introduction to the platform and take a look at how the development work for our Infusion Pump is planned and tracked. Then we\u2019ll take a look at Product Requirements where we\u2019ll see some of the key capabilities around requirements management including traceability and audit trails. After that we\u2019ll move on to Design Input where we\u2019ll see how customer requirements are traced down to system requirements, how those requirements are checked for quality and reviewed for correctness and how we create baselines with electronic signatures. We\u2019ll also see how we can perform risk management activities. After that we\u2019ll move to Design Output where we\u2019ll see Design Verification to prove coverage of the requirements by the design and Design Validation where we\u2019ll show test coverage, test execution and defect tracking. The following steps provide an overview of the ELM dashboard and the concept of \"dash boarding\". Click the Design Planning tab on the Infusion Pump Requirements Project Dashboard . Click the IEC62304 Practice Content link in the Useful Links widget. Notice a new browser tab is opened. Click the IEC62304 option in left-hand sidebar. Click the + next to IEC 62304 Objectives to expand the section. Click IEC 62304 SW Development Process . Click the Objective 5.7.1 link in the detailed list in main window. Note: scroll down if Objective 5.7.1 is not visible in the list. Sample narration The detailed guidance in the delivery process is mapped to the Objectives in the standard, helping engineers to conform to the standard by meeting those objectives. Click the Develop Test Cases link. Explore the Develop Test Cases task. Notice the roles associated with the task, the detailed guidance steps , and additional information links like Tool Mentors (scroll down as required). Close the Medical Devices browser tab by clicking the X and return to the Requirements Management (RM) browser tab. Now is a good time to explore the other widgets on the Design Planning tab of the Infusion Pump Requirements Project Dashboard . Click the Solution Roadmap widget title. Notice the Epics defined as work items on the roadmap. Click the icon next to the Deliver an external infusion pump work item. Notice the items with the Work Item Type equal to Capability . Click the icon next to the Deliver Therapy Capability . Notice the items with the Work Item Type equal to Feature . Click the icon next to the Initiate drub infusion Feature . Notice the items with the Work Item Type equal to Story . Notice the Planned For column. Select Roadmap with Tasks in the View As pull-down menu. Birds-eye view Notice the detailed under Initiate drug infusion with Work Item Type of Task and Story . In Act 2, explore how Project Requirements are tracked in ELM.","title":"Design Planning"},{"location":"Part%203/01%20ProductRequirements/","text":"In Act 2, the topics of Project Requirements and Change Management of requirements are explored. Sample narration Now lets look at Product Requirements. Lets return to our dashboard and take a look at the requirement Artifacts for the infusion pump. Here we can see that we have Modules \u2013 or documents of requirements organized at various levels, but as you\u2019ll see in a few minutes, the requirements in those documents are all connected. Lets open the Product Requirements document and take a closer look. These requirements reflect the end user needs, of course there are other documents reflecting regulatory requirements, system requirements, software requirements and so on. Here we have a rich editing environment including pictures, rich text, tables and so on. The document has hierarchy \u2013 for example if we collapse the document we can see it has major sections; an introduction, a general description of the product and then more detailed requirements. If we expand the specific requirements section, we can see those requirements are organized into functional, performance, operational and so on. Another important facet of good requirements management is granularity. Every sketch, requirement and heading in this document is an independent, atomic artifact which means that it can be directly referenced. As you will see later, traceability is between atomic artifacts rather than documents. It also means that multiple users can all edit this same document at the same time and It facilitates re-use at the granular level - an artifact can be added to multiple documents so no more copy and paste and the overhead that comes with it. Artifacts have type \u2013 for example this document has Headings, Information Items and Product Requirements. Product Requirements have a Priority and a Status whilst the other types do not. A strong typing system like this reduces typographical errors and improves the consistency and reportability of the data. Note that here we\u2019ve applied a view to quickly switch from the document style we saw previously to more of a spreadsheet style. Any of the artifact attributes may be shown as columns and views can also filter the data \u2013 for example this view shows only Product Requirements, along with their priority and status. This allows the user to quickly and easily focus on what\u2019s important at the time. Notice at the top of the page here is a notification that if we want to make any changes to this document then we have to do that as part of a change set. This project has been placed under change control. This allows the team to manage the impact of changes as well as ensuring that changes are only made with the appropriate approvals and that those changes are properly documented. Any changes that are made are automatically tracked and maintained for an audit trail. We can view the history of a single requirement \u2013 or in this case the entire document. This Audit History shows us every change that was made. Who made it, when it happened, the exact nature of the change and the change set in which it was made. Click the Chrome bookmark Project Dashboards and select the Infusion Pump bookmark. Warning Do not try to click Project Dashboard in the menu bar as that will open the CCM project dashboard and not the RM dashboard. Click the Artifacts tab in the main header bar. Birds Eye View Click on each folder in turn to show the hierarchy of requirements documents (Modules). Take note of the various Artifact Types of the documents, such as the 04 Hazard and RiskAnalysis artifact types shown below. Click the Product Requirements folder, and then click Infusion Pump Product Requirements . Notice the graphics, rich text, tables, and hierarchy of the artifact. Refine the view. In the view's header bar, click the menu button and click Show Full Hierarchy and then Show 1 Level . Click the icon next to the 3 Specific Requirements content item. Note the various categories of requirements defined. Click the icon next to the 3.1 Functional Requirements content item. Click checkbox next to the first functional requirement: This device shall use a valve... . Notice that each object in the document is an independent, atomic artifact. This enables multiple engineers to author and edit the document at the same time. When a requirement is being edited, it is automatically locked preventing others from editing it, but other objects can be edited by others. It also facilitates reuse as any of these artifacts can be used in multiple documents without having to copy and paste content. Click the 1. Artifact Attributes link in the Views panel. Birds eye view Notice that each artifact can be of a different type, and have different attributes based upon the type. A strong typing system reduces typographical erros and improves the consistency and reportability of the data. Click the 2. Product Requirements link in the Views panel. Notice the views can also filter the displayed document data. In this case filtering out Headings and showing only Product Requirements . Next, explore the configuration and change management capabilities in ELM.","title":"Product Requirements"},{"location":"Part%203/02%20ConfigAndChangeMgmt/","text":"Sample narration Now lets look at traceability which is mandated in ISO 13485 Traceability: Traditionally, traceability is maintained in separate documents such as spreadsheets \u2013 a manual process, prone to error, very costly to maintain and outdated as soon as the author clicks \u201csave\u201d. In the ELM platform traceability is added directly to the artifacts themselves \u2013 right here in the web browser. This view shows us not only the product requirements for the Infusion Pump but also the system requirements further downstream that satisfy them. For example \u2013 this product requirement \u2013 4968 is satisfied by this system requirement 4812. If we hover our mouse over a linked requirement \u2013 like 4812, we can see another common capability across the platform \u2013 Rich Hover. Whenever we have a link to another engineering artefact we can see key information about it without actually following the link. That might be a linked requirement as in this case but it might also be a requirements engineer looking at a linked design \u2013 or a test engineer looking at a requirement they are testing against. It\u2019s a huge time saver. We can also easily see Gap Analysis \u2013 which of these requirements has no traceability downstream \u2013 for example here requirement 5023 has no system level coverage. Of course that kind of information is also easily exposed onto dashboards \u2013 as we\u2019ll see later. Here we can see Link Validity. Whenever two artifacts are linked \u2013 if one of those artifacts changes then the connection between them becomes suspect. Here for example the link between 4968 and 4812 is suspect because one of those requirements got changed. Now an analysis is required to confirm that the link is still valid. The ELM Platform automatically highlights when this happens so making that assessment is much easier and of course this is another common feature so that also applies for the linked models, test cases and so on. Notice the banner at the top of the Artifacts tab. The message informs users that the module is under change management. Later in the demonstration script a new change set will be created. For now, learn about the audit and traceability capabilities of ELM. Click the Open History menu item under the hamburger menu icon. Birds eye view Click the Audit History tab. Click the Expand All link. Notice the full audit trail. From this view, auditors can view who changed what, when the change was made, and in which change set . Click the Close History button. Click the 3. Satisfied By link in the Views panel. Notice the columns can show traceability . Here, traceability is seen in the Satisfied By column. Rows with data in the Satisfied By column provide links to the downstream system requirements that satisfy these higher-level requirements. Notice that several rows have no information in the Satisfied By column. These empty fields illustrate gaps in the requirements providing a gap analysis traceability view. Hover the mouse over the 4968 link in the ID column (don't click the link). Notice the additional details about the requirement that are visible by simply hovering over the item in the table. Click the first icon in the Satisfied By columns. Notice the options available to set the link validity for the requirement. Traditionally, traceability is maintained in separate documents such as spreadsheets \u2013 a manual process, prone to error, very costly to maintain, and usually outdated as soon as the author clicks \u201csave\u201d. Here traceability is added, maintained, and tracked directly in the IBM solution and can easily be reported on. To learn more about link validity go here . For Act 3, remain on the current browser page and learn about ELM's design input capabilities.","title":"Change Management"},{"location":"Part%204/01%20RQA/","text":"In Act 3, the topic of Project Requirements and Change Management of requirements is explored. Sample narration Next, let us look at Design Input. We are starting where we left off \u2013 here in the Product Requirements document, looking at the traceability downstream to System Requirements. Now, let us follow one of those links. We are now looking at the System Requirements document. If we apply this view we can see the traceability back to the product requirements upstream as well as to the software requirements downstream. For example \u2013 system requirement 4812 satisfies product requirement 4968 and itself is satisfied by three software requirements. Next we\u2019ll put these requirements through a review cycle but before we do that we\u2019re going to use the power of AI to check and improve their quality. It\u2019s likely that we\u2019ll need to edit the requirements so let us start by creating a Change Set to encapsulate those changes. Note that our engineer Susan is now working in her own private area \u2013 any changes made here are isolated from the rest of the team until they are delivered. In a real project we would trace this change set to a work item and the platform can even be configured so that we cannot deliver any changes back to the team without a work item with the appropriate approvals on it \u2013 you will see those approvals in a moment when we look at reviews. For now let us just check our requirements. This view filters the document to show only System Requirements and also adds columns for some attributes that will store the result of our quality check \u2013 which is useful for reporting later. Let's select all of our requirements and ask the Requirements Quality Assistant or RQA to check them. RQA analyses the requirements using Watson Natural Language Processing and then scores them against the rules defined in the INCOSE Requirements Engineering handbook \u2013 or indeed against custom rulesets for specific projects or domains. Here we can see that most of the requirements have scored well \u2013 and a couple need some work. Take a look at one of those. First RQA gives us the reason for the score \u2013 in this case we have an Unclear Term \u2013 the phrase In A Clear manner is ambiguous and subjective which makes it very difficult to test. Detailed guidance on how to improve poorly written requirements is included \u2013 an essential tool to help less experienced requirement writers improve their skills. Note that this isn\u2019t something as simple as a keyword search \u2013 the requirement below this one also has the word clear in it \u2013 but in that context it\u2019s not ambiguous and the requirement scores 100. RQA goes beyond simple keyword searches, it can understand context, meaning and intent. We can fix that requirement fairly easily \u2013 in this case that ambiguous phrase is actually not needed at all so let's remove it \u2013 and then ask RQA to recheck that requirement. Identifying and fixing quality issues like ambiguous, incomplete and poorly structured requirements before a review saves time and reduces cost \u2013 domain experts can spend their valuable time reviewing the intent of a requirement rather than wasting time fixing things like inconsistencies. In a real project we would fix all of the issues, deliver the requirements back to the team and create a Baseline of the requirements ready for the review. As this is a demo, I\u2019ve already created that baseline and the review so I\u2019m just going to discard this change set and then I\u2019ll switch from Susans personal editing area back to the team area. Click the 4812 requirement link in the Satisfied By column. Click the 3. Up and Downstream Satisfaction in the Views panel. Now use Requirements Quality Assistant (RQA) to check the quality of the requirements. RQA can populate the scores returned and the reasons for any low scores as attributes in the module. For these attributes to be populated, the module must be writable and so you will start by creating a change set . A change set allows a team to manage the impact of changes and ensures that changes are only made with the appropriate approvals, and that those changes are properly documented. Typically, this option is enabled when the project reaches a milestone and/or stable state. Click the current context button at top right of header bar. Birds eye view Click Create Change Set... . Enter Checking Requirements Quality in the Name text entry field. Click the Create button. Click the current context button and verify the current change set is Checking Requirements Quality . Click the Mini Dashboard icon. Click the Pin icon to keep the Mini Dashboard open. Click the 9. RQA link in the Views panel. Take notice of the columns in the RQA view: RQA Score and Issues Found by RQA . Click the double arrow icon in the sidebar to collapse both the left and right-hand sidebars. Hover the mouse between the Views panel and the table of Requirements . Click the checkbox next to the first requirement . Scroll down to bottom of list, hold down the Shift key, and click the checkbox for the last requirement to select all the requirements. Click the Check selected button in the RQA panel of the Mini Dashboard . It will take a few seconds for the RQA scoring to complete. Drag the right-hand side of the Mini Dashboard to the right to expand it. Notice the scores returned have been recorded as attributes and the reason for any low scores. Click the 5107 requirement in the RQA panel of the Mini Dashboard . Warning The RQA team releases a new version every 2 weeks. It is impossible to keep training material up to date with that schedule. The scores returned by RQA may therefore be completely different than the ones recorded in this document. If this is the case then skip fixing the requirement below and discard the change set. Click Show details under the 5107 requirement . In the main table, Double-click inside the text of the 5107 requirement to edit it. Delete the text in a clear manner and click away from the requirement to apply the change. Now that the ambiguity of the requirement is removed, recheck the modified artifact. Click the recheck icon in the RQA panel of the Mini Dashboard for the updated requirement. Notice the 5107 requirement now scores a 100. Checking the requirements for quality is not a replacement for a review rather an enhancement. Check and fixing quality before going into a review means that domain experts can spend their valuable time reviewing the intent of the requirement rather than wasting time on poorly written requirements. In a real project all requirements would be checked and fixed before creating a baseline and moving into a review cycle. For this demonstration environment, the changes will be discarded. Click the Pin to collapse the Mini Dashboard > Click away from the Mini Dashboard so it slides back in place. Click the current context button . Click Discard Change Set... . Click the Discard the Change Set button. Important Creating a change set moves the context out of the base global configuration into Susan\u2019s personal stream. Discarding (or delivering) the change set does return to the base global configuration \u2013 one must switch back to the base \u2018variant\u2019 of the product using the favorites menu. Click the current context button . Click the dropdown button to see the recently used and favorite configurations. Click the Infusion Pump Base global stream. Click the collapsed left-hand sidebar to expand and reveal the Views panel. Next, examine the Review process in ELM.","title":"Requirements Quality Assistant"},{"location":"Part%204/02%20Reviews/","text":"Sample narration As per ISO 13485, requirements need to be approved and reviewed. Lets return to our dashboard and see how a review cycle takes place. Here we have a work item to review the System Requirements for the Infusion Pump. Here on the approvals tab there are several approvals that are required to complete this work \u2013 the reviews themselves and a final managerial approval. Here on the links tab there are several links: The review baseline is the document that our reviewers have been asked to review. This child task is an issue that was raised during the review and lastly the approved baseline is a link to the baselined document after the review was completed and the requirements were approved. Lets start by clicking the Review baseline link. Note that the system requirements document has opened \u2013 but in the context of a Baseline, and so these artifacts are all frozen and cannot be edited. Lets go back to the work item and click the child task. Here we can see that this is an Issue \u2013 raised by one of our reviewers, Dan, and he\u2019s assigned the work item to Susan to resolve. At the bottom we can see a description of Dan\u2019s issue \u2013 he doesn\u2019t think the requirement is complete enough and has also identified a potential missing requirement. Further down we can see that Susan has replied \u2013 she agreed and made some changes to the document in response to the review comment. On the Approvals tab, Dan added himself as the approver. Note that the parent review work item would not have been allowed to close until all of its children were also approved and closed \u2013 so any issues raised during the review would prevent it from completing until they were addressed. On the links tab there is a link to the requirement that had a problem \u2013 which helped Susan identify it in the document. Lets follow that link and take a look. Again we are in the context of the review baseline and the requirement reads The system shall perform a self test on initiation. As we saw in the work item, Susan agreed with the review comment that is was not complete enough and made some changes \u2013 after that the review work item was approved and closed, and another baseline was taken and electronically signed. Let\u2019s switch to that baseline and see what happened. It may not be immediately obvious what the changes were but the ELM Platform allows us to compare artifacts to see any differences \u2013 in this case let\u2019s compare this approved baseline to the original review baseline. Here we can see the additional requirement that Susan added as well as the existing requirement that was modified \u2013 highlighted in blue. We can dive deeper into that requirement and see the modifications that were made. Lets now close that comparison and return to the document. Next we can follow this link to the actual approved baseline where we can see its electronic signature.","title":"Reviews"},{"location":"Part%204/03%20RiskManagement/","text":"Sample narration Now let\u2019s look at risk management. First we\u2019ll return to our project dashboard and once again we\u2019ll switch back to the main team working area. Here on our dashboard we have two tabs of interest \u2013 FMEA or Failure Modes and Effects Analysis and Operational Hazard Analysis. There are many similarities between the two \u2013 they both examine failure modes, effects and causes \u2013 the primary difference is that operational hazard analysis focuses on what could go wrong if the product is used incorrectly whilst FMEA focuses on the identification of possible failures in the design of the product components. Lets start with FMEA. Our dashboard is surfacing the results of the FMEA analysis in a consumable way \u2013 for example at the top here we have a traceability view from the system requirement to a potential failure related to that requirement, to the safety requirement that was created to mitigate against the risk of that happening. On the right we have more of a metrics view \u2013 how many failure modes are mitigated by safety requirements and how many are not. These are not just pictures of course this is all live data. Let\u2019s use the traceability view to navigate into the FMEA document and see the analysis. Here we can see the columns of information that allow us to perform the FMEA \u2013 the identified failure mode, the effects of that failure, its potential causes and any current controls we have in place. Those assessments allow us to assign numeric values for Severity, Probability and Detection \u2013 and those can then be used to calculate the Risk Priority Number or RPN which is a simple measure of comparison. Here too the platform can help by automating steps or performing calculations on the data. Lets see an example of this in action \u2013 we\u2019\u2019ll start by making a change set so we can make some changes to this data. Then lets edit this Risk Priority Number and actually delete that value. Now in our mini-dashboard we can expand this RPN Calculator which will perform that calculation for us and populate the field again. Of course that\u2019s a very simple example and a very simple calculation but it shows how the basic capabilities of the platform may be extended with automation widgets like these. OK lets go ahead and discard that changeset \u2013 and as before we\u2019ll also switch back to the team area. Back on our Project Dashboard lets now select Operational Hazard Analysis. That analysis is performed in much the same way as FMEA with the major difference being that these hazards are the result of user error rather than device failure. The ELM Platform allows for automatic generation of federated documentation. Here we have a link to an automatically generated document that combines both of those analyses into a Risk Management File.","title":"Risk Management"},{"location":"Part%205/01%20DesignVerification/","text":"","title":"Design Verification"},{"location":"Part%205/02%20DesignValidation/","text":"","title":"Design Validation"},{"location":"Part%206/01%20EngineeringInsights/","text":"","title":"Engineering Insights for Metrics"}]}